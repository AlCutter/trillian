// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cache

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"testing"

	"github.com/golang/protobuf/proto"
	"github.com/google/trillian/merkle/rfc6962"
	"github.com/google/trillian/storage"
	"github.com/google/trillian/storage/storagepb"
	"github.com/kylelemons/godebug/pretty"
)

const goldenSubtreeNoIntermediatesB64 = "H4sIAAAAAAAA/1xYvW7kRhPEB1zw4WwDhmznBz0BZzj8CxTscrnLf1KBAoUHwZYBBQoU6O0Nw1u1sKvSxrCnu7q6uoc////+169f2vb14e7H+ffvf3zrv3/8+S1l9799/dIO3cPdT/9aQ2yuhw+ZHA45XDyJNa+uLi7v6iIrr+bezDHiwkc15zDPb2quC5jNSV1eAzlpIEWOw+a6RoqrmmOI97/8k+LTw90P//GBDA+aYYT1Ua0IolNAK5w9a2jM4/JsGCHrZVFzg9Obno55dnV9TBoG0tu1gjEFxNFpHAFJd5I0jY9iTLjsRb6PZMCzhlBfQxifNI3UXM2TFa9CwL1RLqB6Y1JzAd+bpRcB0f5kWaN+naJfIpD1xRjAw5piReCU+g2iu1iKWUCKn5Yi2fxiTAR6pw+lLXqt07JW9dV6GTQMIm33Fei15WA8Ir0Maeay1gYpzPuHmgvg0WkgJW4cBmtjUPSsnVIngPdh4EE4euvXANejNUXC6dEwLVCBLVmvAKj905IBIrulXrDhzJyjMhftoYZhW+oBDdNqcRNAnawyJTXJWJ2RqMZqtsZqenC7sdYbK5BM61XgwtGCThRSJXvJkmsqFUCazEUJSCfr2wo1314NUpze3szM9jIngYqnGeYI76BWdnP7rmhQjlWka7DjUtt14NJiXMoA0lERDWxQHRUNyZsZS8GZLbO0UatOYyZ0g0VHKu3GglsJF603MDqpthVUPEWuAusu1lkZa2KpkKOjMToh6PVg2AHpwQqbSBpThAoFmM13BVBnO10D1NkCrBHgYszL0AEX2zAysHoxEWo43LW6JZLsDamAG3uLj4I62PyjNM2m4eTk8m5hg8An1SCO1t6AChR8k3BWcjMx5AJzVLGOlHBt/gaV6Q29SPW1C3Pw7KicDJDTow7nCKYetQciWa2x3eR7sRbAXD0r2UmP0XYuKuFsQ7HC6X0w11z9VCC5ZpzeNDp080WzblCqwcZZDuQG4wxHzkHRD9xJdEVoEva2g+xtGYyvYoRWHXVti6SWei1h7ZRwJRfYV+seNMRkaxFPT8aW2x5mbCEv2k/FmK6tTiU12riccV3VqAMq0mpFyM5Oa0oCDNaWfCCNljiZuJrIcHfZTAUjh6EtoOTAbi+TxLq+SQnZPEqMyGGvhS0oUzZAIjO0qvD9NpkCUusmax8ufouZuZjOduVNNgxU4jGYfEVut9YT3M4WWzwaThzr2ICCbWamoHSKVEWxU/Fp4GIxmWcn90aFyPeMjbhIoGzkc96stmOwFw/ai9zwzjqv+TycTVEqMkRXnUgXmneN4C5WF07rzQjJuuw2mqikk83fis9wg4mPgMV2bD4CVpP0m+KpJvBBMxj5crq2pZKPs8226Ygy7laBggqimh6p9LoHJAJi/czVu9VFMYfjkxax5HZlXcctZbSdgR09G8dI1NXEkCP8qOBFDIGT8qPgoNUO4Kt7tHYu+KK30pbw3Cp0tz8QauV2NlszVzU071k0j49Mmy58LOzWWUUOFy/igiXRuUAPk3UQa7LYfQ18nLWsNbjYm4+A5hxtbCX+r7DBcJsuJskFfxRoAUuKlU6zmv9NjEik6GQaVrLdrFVCBewGwY5/MazbmPhuLhI3FyUSX3CtrmbcclpVu4RyryYzgdRYJDYg1ClCfCj0pkj8WTQZm/mgna3cNWXDwqDI9HY6cKjalQlOVuPobdlVOQmcTdop1NHBKpgj6sF68PY3UsnBcm+mrlwbDopewAw66l7EX8GdbuJs+bMmwl+tvTEmUC5tWUp19tf//g4AAP//V1xHUZcWAAA="

const goldenSubtreeB64 = ""

func buildFullLogSubtree() *storagepb.SubtreeProto {
	r := &storagepb.SubtreeProto{
		Depth:             8,
		Leaves:            make(map[string][]byte),
		InternalNodeCount: 256 - 1 - 1,
	}
	for i := 0; i < 256; i++ {
		r.Leaves[storage.Suffix{Bits: 8, Path: []byte{byte(i)}}.String()] = []byte(fmt.Sprintf("Leaf Hash %d", i))
	}
	return r
}

func CreateGoldenSubtree(t *testing.T) {
	st := buildFullLogSubtree()
	fmt.Printf("no intermediate:\n%s\n", squashSubtree(t, st))
	LogPopulateFunc(rfc6962.DefaultHasher)(st)
	fmt.Printf("populated:\n%s\n", squashSubtree(t, st))
}

func squashSubtree(t *testing.T, st *storagepb.SubtreeProto) string {
	t.Helper()
	flat, err := proto.Marshal(st)
	if err != nil {
		t.Fatal(err)
	}
	b := bytes.Buffer{}
	w := gzip.NewWriter(&b)
	_, err = w.Write(flat)
	if err != nil {
		t.Fatal(err)
	}
	w.Close()
	b64 := base64.StdEncoding.EncodeToString(b.Bytes())
	return b64
}

func goldenSubtreeNoIntermediates(t *testing.T) *storagepb.SubtreeProto {
	t.Helper()
	return unsquashSubtree(t, goldenSubtreeNoIntermediatesB64)
}

func goldenSubtree(t *testing.T) *storagepb.SubtreeProto {
	t.Helper()
	return unsquashSubtree(t, goldenSubtreeB64)
}

func unsquashSubtree(t *testing.T, b64 string) *storagepb.SubtreeProto {
	gz, err := base64.StdEncoding.DecodeString(b64)
	if err != nil {
		t.Fatal(err)
	}
	r, err := gzip.NewReader(bytes.NewBuffer(gz))
	if err != nil {
		t.Fatal(err)
	}
	defer r.Close()
	raw, err := ioutil.ReadAll(r)
	if err != nil {
		t.Fatal(err)
	}
	var subtree storagepb.SubtreeProto
	if err := proto.Unmarshal(raw, &subtree); err != nil {
		t.Fatal(err)
	}
	return &subtree
}

func TestLogPopulation(t *testing.T) {
	f := LogPopulateFunc(rfc6962.DefaultHasher)

	for _, test := range []struct {
		name    string
		subtree *storagepb.SubtreeProto
		want    *storagepb.SubtreeProto
	}{
		{
			name:    "full1",
			subtree: goldenSubtreeNoIntermediates(t),
			want:    goldenSubtree(t),
		},
	} {
		t.Run(test.name, func(t *testing.T) {
			if err := f(test.subtree); err != nil {
				t.Fatalf("failed to repopulate subtree: %v", err)
			}
			if diff := pretty.Compare(test.want, test.subtree); diff != "" {
				t.Fatalf("unexpected repopulation - diff: %s", diff)
			}
		})
	}
}
